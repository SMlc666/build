name: CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  push:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell

      - name: 安装软件包
        run: |
          sudo apt-get update
          sudo apt-get -y install python3 cmake ninja-build git python3-pip libedit-dev libncurses5-dev libncursesw5-dev libtinfo5
          sudo apt-get -y install crossbuild-essential-arm64 llvm build-essential lld binutils-aarch64-linux-gnu linux-libc-dev-arm64-cross clang g++-arm-linux-gnueabihf  gcc-arm-linux-gnueabihf ccache

      - name: 配置ccache
        run: |
          ccache -M 7G  # 设置最大缓存大小为7G

      - name: 打开缓存ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/*.cpp') }}

      # Runs a set of commands using the runners shell
      - name: 拉取llvm
        run: |
          git clone --depth 1 -b main https://github.com/llvm/llvm-project.git
          
      - name: 编译llvm
        run: |
          cd llvm-project
          mkdir build && cd build
          cmake -G Ninja \
            -DLLVM_TARGETS_TO_BUILD="AArch64" \
            -DLLVM_ENABLE_LLD=ON \
            -DLLVM_DEFAULT_TARGET_TRIPLE=aarch64-unknown-linux-gnu \
            -DLLVM_DYLIB_COMPONENTS="all" \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="all" \
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
            -DCMAKE_C_COMPILER_LAUNCHER=clang \
            -DCMAKE_C_COMPILER_LAUNCHER=clang++ \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ../llvm
          ninja -j 8

      - name: ccache命中信息
        run: |
          ccache -s

      - name: 缓存ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/*.cpp') }}

      - name: 切换文件夹
        run: |
         cd llvm-project
         cd build

      - name: 列出文件夹
        run: |
          ls
          pwd

      - name: 创建文件夹
        run: |
         if [ ! -d "lib" ]; then mkdir lib; fi
         if [ ! -d "bin" ]; then mkdir bin; fi
         if [ ! -d "include" ]; then mkdir include; fi
         if [ ! -d "projects" ]; then mkdir projects; fi
         if [ ! -d "share" ]; then mkdir share; fi
         if [ ! -d "tools" ]; then mkdir tools; fi

      - uses: actions/upload-artifact@v4
        with:
          name: 上传编译产物
          path: |
            lib/
            bin/
            include/
            projects/
            share/
            tools/
          compression-level: 0 # no compression